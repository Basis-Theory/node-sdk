/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Connections } from "../resources/connections/client/Client";
import { Invitations } from "../resources/invitations/client/Client";
import { Members } from "../resources/members/client/Client";
import { Self } from "../resources/self/client/Client";

export declare namespace Tenants {
    interface Options {
        environment?: core.Supplier<environments.BasisTheoryEnvironment | string>;
        apiKey: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Tenants {
    constructor(protected readonly _options: Tenants.Options) {}

    protected _connections: Connections | undefined;

    public get connections(): Connections {
        return (this._connections ??= new Connections(this._options));
    }

    protected _invitations: Invitations | undefined;

    public get invitations(): Invitations {
        return (this._invitations ??= new Invitations(this._options));
    }

    protected _members: Members | undefined;

    public get members(): Members {
        return (this._members ??= new Members(this._options));
    }

    protected _self: Self | undefined;

    public get self(): Self {
        return (this._self ??= new Self(this._options));
    }
}
