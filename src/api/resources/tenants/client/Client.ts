/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Connections } from "../resources/connections/client/Client";
import { Invitations } from "../resources/invitations/client/Client";
import { Members } from "../resources/members/client/Client";
import { Owner } from "../resources/owner/client/Client";
import { Self } from "../resources/self/client/Client";

export declare namespace Tenants {
    export interface Options {
        environment?: core.Supplier<environments.BasisTheoryEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the BT-TRACE-ID header */
        correlationId?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the BT-TRACE-ID header */
        correlationId?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Tenants {
    protected _connections: Connections | undefined;
    protected _invitations: Invitations | undefined;
    protected _members: Members | undefined;
    protected _owner: Owner | undefined;
    protected _self: Self | undefined;

    constructor(protected readonly _options: Tenants.Options = {}) {}

    public get connections(): Connections {
        return (this._connections ??= new Connections(this._options));
    }

    public get invitations(): Invitations {
        return (this._invitations ??= new Invitations(this._options));
    }

    public get members(): Members {
        return (this._members ??= new Members(this._options));
    }

    public get owner(): Owner {
        return (this._owner ??= new Owner(this._options));
    }

    public get self(): Self {
        return (this._self ??= new Self(this._options));
    }
}
