/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as BasisTheory from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace NetworkTokens {
    export interface Options {
        environment?: core.Supplier<environments.BasisTheoryEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the BT-TRACE-ID header */
        correlationId?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the BT-TRACE-ID header */
        correlationId?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class NetworkTokens {
    protected readonly _options: NetworkTokens.Options;

    constructor(_options: NetworkTokens.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {BasisTheory.CreateNetworkTokenRequest} request
     * @param {NetworkTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BasisTheory.BadRequestError}
     * @throws {@link BasisTheory.UnauthorizedError}
     * @throws {@link BasisTheory.ForbiddenError}
     * @throws {@link BasisTheory.UnprocessableEntityError}
     * @throws {@link BasisTheory.InternalServerError}
     *
     * @example
     *     await client.networkTokens.create()
     */
    public create(
        request: BasisTheory.CreateNetworkTokenRequest = {},
        requestOptions?: NetworkTokens.RequestOptions,
    ): core.HttpResponsePromise<BasisTheory.NetworkToken> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: BasisTheory.CreateNetworkTokenRequest = {},
        requestOptions?: NetworkTokens.RequestOptions,
    ): Promise<core.WithRawResponse<BasisTheory.NetworkToken>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BasisTheoryEnvironment.Default,
                "network-tokens",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "BT-TRACE-ID": requestOptions?.correlationId,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BasisTheory.NetworkToken, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BasisTheory.BadRequestError(
                        _response.error.body as BasisTheory.ValidationProblemDetails,
                        _response.rawResponse,
                    );
                case 401:
                    throw new BasisTheory.UnauthorizedError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 403:
                    throw new BasisTheory.ForbiddenError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 422:
                    throw new BasisTheory.UnprocessableEntityError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 500:
                    throw new BasisTheory.InternalServerError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BasisTheoryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BasisTheoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BasisTheoryTimeoutError("Timeout exceeded when calling POST /network-tokens.");
            case "unknown":
                throw new errors.BasisTheoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {NetworkTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BasisTheory.BadRequestError}
     * @throws {@link BasisTheory.UnauthorizedError}
     * @throws {@link BasisTheory.ForbiddenError}
     * @throws {@link BasisTheory.NotFoundError}
     * @throws {@link BasisTheory.InternalServerError}
     *
     * @example
     *     await client.networkTokens.cryptogram("id")
     */
    public cryptogram(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): core.HttpResponsePromise<BasisTheory.NetworkTokenCryptogram> {
        return core.HttpResponsePromise.fromPromise(this.__cryptogram(id, requestOptions));
    }

    private async __cryptogram(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): Promise<core.WithRawResponse<BasisTheory.NetworkTokenCryptogram>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BasisTheoryEnvironment.Default,
                `network-tokens/${encodeURIComponent(id)}/cryptogram`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "BT-TRACE-ID": requestOptions?.correlationId,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BasisTheory.NetworkTokenCryptogram, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BasisTheory.BadRequestError(
                        _response.error.body as BasisTheory.ValidationProblemDetails,
                        _response.rawResponse,
                    );
                case 401:
                    throw new BasisTheory.UnauthorizedError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 403:
                    throw new BasisTheory.ForbiddenError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 404:
                    throw new BasisTheory.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new BasisTheory.InternalServerError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BasisTheoryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BasisTheoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BasisTheoryTimeoutError(
                    "Timeout exceeded when calling POST /network-tokens/{id}/cryptogram.",
                );
            case "unknown":
                throw new errors.BasisTheoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {NetworkTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BasisTheory.UnauthorizedError}
     * @throws {@link BasisTheory.ForbiddenError}
     * @throws {@link BasisTheory.NotFoundError}
     * @throws {@link BasisTheory.InternalServerError}
     *
     * @example
     *     await client.networkTokens.get("id")
     */
    public get(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): core.HttpResponsePromise<BasisTheory.NetworkToken> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): Promise<core.WithRawResponse<BasisTheory.NetworkToken>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BasisTheoryEnvironment.Default,
                `network-tokens/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "BT-TRACE-ID": requestOptions?.correlationId,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BasisTheory.NetworkToken, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new BasisTheory.UnauthorizedError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 403:
                    throw new BasisTheory.ForbiddenError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 404:
                    throw new BasisTheory.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new BasisTheory.InternalServerError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BasisTheoryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BasisTheoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BasisTheoryTimeoutError("Timeout exceeded when calling GET /network-tokens/{id}.");
            case "unknown":
                throw new errors.BasisTheoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {NetworkTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BasisTheory.UnauthorizedError}
     * @throws {@link BasisTheory.ForbiddenError}
     * @throws {@link BasisTheory.NotFoundError}
     * @throws {@link BasisTheory.InternalServerError}
     *
     * @example
     *     await client.networkTokens.delete("id")
     */
    public delete(id: string, requestOptions?: NetworkTokens.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BasisTheoryEnvironment.Default,
                `network-tokens/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "BT-TRACE-ID": requestOptions?.correlationId,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new BasisTheory.UnauthorizedError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 403:
                    throw new BasisTheory.ForbiddenError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 404:
                    throw new BasisTheory.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new BasisTheory.InternalServerError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BasisTheoryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BasisTheoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BasisTheoryTimeoutError("Timeout exceeded when calling DELETE /network-tokens/{id}.");
            case "unknown":
                throw new errors.BasisTheoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {NetworkTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BasisTheory.UnauthorizedError}
     * @throws {@link BasisTheory.ForbiddenError}
     * @throws {@link BasisTheory.NotFoundError}
     * @throws {@link BasisTheory.ConflictError}
     * @throws {@link BasisTheory.ServiceUnavailableError}
     *
     * @example
     *     await client.networkTokens.suspend("id")
     */
    public suspend(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): core.HttpResponsePromise<BasisTheory.NetworkToken> {
        return core.HttpResponsePromise.fromPromise(this.__suspend(id, requestOptions));
    }

    private async __suspend(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): Promise<core.WithRawResponse<BasisTheory.NetworkToken>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BasisTheoryEnvironment.Default,
                `network-tokens/${encodeURIComponent(id)}/suspend`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "BT-TRACE-ID": requestOptions?.correlationId,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BasisTheory.NetworkToken, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new BasisTheory.UnauthorizedError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 403:
                    throw new BasisTheory.ForbiddenError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 404:
                    throw new BasisTheory.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new BasisTheory.ConflictError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 503:
                    throw new BasisTheory.ServiceUnavailableError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BasisTheoryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BasisTheoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BasisTheoryTimeoutError(
                    "Timeout exceeded when calling PUT /network-tokens/{id}/suspend.",
                );
            case "unknown":
                throw new errors.BasisTheoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {NetworkTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BasisTheory.UnauthorizedError}
     * @throws {@link BasisTheory.ForbiddenError}
     * @throws {@link BasisTheory.NotFoundError}
     * @throws {@link BasisTheory.ConflictError}
     * @throws {@link BasisTheory.ServiceUnavailableError}
     *
     * @example
     *     await client.networkTokens.resume("id")
     */
    public resume(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): core.HttpResponsePromise<BasisTheory.NetworkToken> {
        return core.HttpResponsePromise.fromPromise(this.__resume(id, requestOptions));
    }

    private async __resume(
        id: string,
        requestOptions?: NetworkTokens.RequestOptions,
    ): Promise<core.WithRawResponse<BasisTheory.NetworkToken>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BasisTheoryEnvironment.Default,
                `network-tokens/${encodeURIComponent(id)}/resume`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "BT-TRACE-ID": requestOptions?.correlationId,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BasisTheory.NetworkToken, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new BasisTheory.UnauthorizedError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 403:
                    throw new BasisTheory.ForbiddenError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 404:
                    throw new BasisTheory.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new BasisTheory.ConflictError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                case 503:
                    throw new BasisTheory.ServiceUnavailableError(
                        _response.error.body as BasisTheory.ProblemDetails,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BasisTheoryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BasisTheoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BasisTheoryTimeoutError(
                    "Timeout exceeded when calling PUT /network-tokens/{id}/resume.",
                );
            case "unknown":
                throw new errors.BasisTheoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["BT-API-KEY"];
        return { "BT-API-KEY": apiKeyValue };
    }
}
