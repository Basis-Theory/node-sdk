/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("GooglePay", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            google_pay: {
                id: "id",
                tenant_id: "tenant_id",
                status: "status",
                expires_at: "2024-01-15T09:30:00Z",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                card: {
                    bin: "bin",
                    last4: "last4",
                    expiration_month: 1,
                    expiration_year: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                details: {
                    tsp: "tsp",
                    auth_method: "auth_method",
                    message_id: "message_id",
                    eci_indicator: "eci_indicator",
                    transaction_id: "transaction_id",
                    currency_code: "currency_code",
                    transaction_amount: 1000000,
                    cardholder_name: "cardholder_name",
                    device_manufacturer_identifier: "device_manufacturer_identifier",
                    payment_data_type: "payment_data_type",
                    merchant_token_identifier: "merchant_token_identifier",
                    authentication_responses: [{}],
                    status: "status",
                },
            },
            token_intent: {
                id: "id",
                type: "type",
                tenant_id: "tenant_id",
                fingerprint: "fingerprint",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                card: {
                    bin: "bin",
                    last4: "last4",
                    expiration_month: 1,
                    expiration_year: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                bank: { routing_number: "routing_number", account_number_last4: "account_number_last4" },
                network_token: {
                    bin: "bin",
                    last4: "last4",
                    expiration_month: 1,
                    expiration_year: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                authentication: { key: "value" },
                _extras: { network_token_ids: ["network_token_ids"] },
            },
        };
        server
            .mockEndpoint()
            .post("/google-pay")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.googlePay.create();
        expect(response).toEqual({
            googlePay: {
                id: "id",
                tenantId: "tenant_id",
                status: "status",
                expiresAt: new Date("2024-01-15T09:30:00.000Z"),
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                card: {
                    bin: "bin",
                    last4: "last4",
                    expirationMonth: 1,
                    expirationYear: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                details: {
                    tsp: "tsp",
                    authMethod: "auth_method",
                    messageId: "message_id",
                    eciIndicator: "eci_indicator",
                    transactionId: "transaction_id",
                    currencyCode: "currency_code",
                    transactionAmount: 1000000,
                    cardholderName: "cardholder_name",
                    deviceManufacturerIdentifier: "device_manufacturer_identifier",
                    paymentDataType: "payment_data_type",
                    merchantTokenIdentifier: "merchant_token_identifier",
                    authenticationResponses: [{}],
                    status: "status",
                },
            },
            tokenIntent: {
                id: "id",
                type: "type",
                tenantId: "tenant_id",
                fingerprint: "fingerprint",
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                expiresAt: new Date("2024-01-15T09:30:00.000Z"),
                card: {
                    bin: "bin",
                    last4: "last4",
                    expirationMonth: 1,
                    expirationYear: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                bank: {
                    routingNumber: "routing_number",
                    accountNumberLast4: "account_number_last4",
                },
                networkToken: {
                    bin: "bin",
                    last4: "last4",
                    expirationMonth: 1,
                    expirationYear: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                authentication: {
                    key: "value",
                },
                extras: {
                    networkTokenIds: ["network_token_ids"],
                },
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            status: "status",
            expires_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            data: { key: "value" },
            authentication: { threeds_cryptogram: "threeds_cryptogram", eci_indicator: "eci_indicator" },
            details: {
                tsp: "tsp",
                auth_method: "auth_method",
                message_id: "message_id",
                eci_indicator: "eci_indicator",
                assurance_details: { account_verified: true, card_holder_authenticated: true },
                transaction_id: "transaction_id",
                currency_code: "currency_code",
                transaction_amount: 1000000,
                cardholder_name: "cardholder_name",
                device_manufacturer_identifier: "device_manufacturer_identifier",
                payment_data_type: "payment_data_type",
                merchant_token_identifier: "merchant_token_identifier",
                authentication_responses: [{}],
                status: "status",
            },
        };
        server.mockEndpoint().get("/google-pay/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.googlePay.get("id");
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            status: "status",
            expiresAt: new Date("2024-01-15T09:30:00.000Z"),
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            card: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            data: {
                key: "value",
            },
            authentication: {
                threedsCryptogram: "threeds_cryptogram",
                eciIndicator: "eci_indicator",
            },
            details: {
                tsp: "tsp",
                authMethod: "auth_method",
                messageId: "message_id",
                eciIndicator: "eci_indicator",
                assuranceDetails: {
                    accountVerified: true,
                    cardHolderAuthenticated: true,
                },
                transactionId: "transaction_id",
                currencyCode: "currency_code",
                transactionAmount: 1000000,
                cardholderName: "cardholder_name",
                deviceManufacturerIdentifier: "device_manufacturer_identifier",
                paymentDataType: "payment_data_type",
                merchantTokenIdentifier: "merchant_token_identifier",
                authenticationResponses: [{}],
                status: "status",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = "string";
        server.mockEndpoint().delete("/google-pay/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.googlePay.delete("id");
        expect(response).toEqual("string");
    });
});
