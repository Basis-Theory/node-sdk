/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("ApplicationTemplates", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                description: "description",
                application_type: "application_type",
                template_type: "template_type",
                is_starter: true,
                rules: [{}],
                permissions: ["permissions"],
            },
        ];
        server
            .mockEndpoint()
            .get("/application-templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applicationTemplates.list();
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                description: "description",
                applicationType: "application_type",
                templateType: "template_type",
                isStarter: true,
                rules: [{}],
                permissions: ["permissions"],
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            application_type: "application_type",
            template_type: "template_type",
            is_starter: true,
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
            permissions: ["permissions"],
        };
        server
            .mockEndpoint()
            .get("/application-templates/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applicationTemplates.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            applicationType: "application_type",
            templateType: "template_type",
            isStarter: true,
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
            permissions: ["permissions"],
        });
    });
});
