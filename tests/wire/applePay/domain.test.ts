// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../../src/api/index";
import { BasisTheoryClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Domain", () => {
    test("deregister (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };

        server
            .mockEndpoint()
            .post("/apple-pay/domain-deregistration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.applePay.domain.deregister({
            domain: "domain",
        });
        expect(response).toEqual(undefined);
    });

    test("deregister (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "x" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay/domain-deregistration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.deregister({
                domain: "x",
            });
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("deregister (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "x" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay/domain-deregistration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.deregister({
                domain: "x",
            });
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { domains: [{ domain: "domain", status: "status" }] };
        server
            .mockEndpoint()
            .get("/apple-pay/domain-registration")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applePay.domain.get();
        expect(response).toEqual({
            domains: [
                {
                    domain: "domain",
                    status: "status",
                },
            ],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .get("/apple-pay/domain-registration")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.get();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("register (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { domains: [{ domain: "domain", status: "status" }] };
        server
            .mockEndpoint()
            .post("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applePay.domain.register({
            domain: "domain",
        });
        expect(response).toEqual({
            domains: [
                {
                    domain: "domain",
                    status: "status",
                },
            ],
        });
    });

    test("register (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "x" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.register({
                domain: "x",
            });
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("register (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "x" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.register({
                domain: "x",
            });
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("register (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "x" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.register({
                domain: "x",
            });
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("register (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "x" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.register({
                domain: "x",
            });
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });

    test("register (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "x" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.register({
                domain: "x",
            });
        }).rejects.toThrow(BasisTheory.ServiceUnavailableError);
    });

    test("registerAll (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { domains: [{ domain: "domain", status: "status" }] };
        server
            .mockEndpoint()
            .put("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applePay.domain.registerAll();
        expect(response).toEqual({
            domains: [
                {
                    domain: "domain",
                    status: "status",
                },
            ],
        });
    });

    test("registerAll (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.registerAll();
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("registerAll (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.registerAll();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("registerAll (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.registerAll();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("registerAll (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.registerAll();
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });

    test("registerAll (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/apple-pay/domain-registration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.domain.registerAll();
        }).rejects.toThrow(BasisTheory.ServiceUnavailableError);
    });
});
