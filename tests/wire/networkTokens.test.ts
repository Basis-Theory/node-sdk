// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../src/api/index";
import { BasisTheoryClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("NetworkTokens", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            data: { number: "number", expiration_month: 1, expiration_year: 1, cvc: "cvc" },
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            token_id: "token_id",
            token_intent_id: "token_intent_id",
            _extras: { deduplicated: true },
        };
        server
            .mockEndpoint()
            .post("/network-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkTokens.create();
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            data: {
                number: "number",
                expirationMonth: 1,
                expirationYear: 1,
                cvc: "cvc",
            },
            card: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            networkToken: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            tokenId: "token_id",
            tokenIntentId: "token_intent_id",
            extras: {
                deduplicated: true,
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.create();
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.create();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.create();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.create();
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.create();
        }).rejects.toThrow(BasisTheory.InternalServerError);
    });

    test("cryptogram (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { cryptogram: "cryptogram", eci: "eci" };
        server
            .mockEndpoint()
            .post("/network-tokens/id/cryptogram")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkTokens.cryptogram("id");
        expect(response).toEqual({
            cryptogram: "cryptogram",
            eci: "eci",
        });
    });

    test("cryptogram (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens/id/cryptogram")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.cryptogram("id");
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("cryptogram (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens/id/cryptogram")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.cryptogram("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("cryptogram (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens/id/cryptogram")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.cryptogram("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("cryptogram (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/network-tokens/id/cryptogram")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.cryptogram("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("cryptogram (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/network-tokens/id/cryptogram")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.cryptogram("id");
        }).rejects.toThrow(BasisTheory.InternalServerError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            data: { number: "number", expiration_month: 1, expiration_year: 1, cvc: "cvc" },
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            token_id: "token_id",
            token_intent_id: "token_intent_id",
            _extras: { deduplicated: true },
        };
        server.mockEndpoint().get("/network-tokens/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.networkTokens.get("id");
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            data: {
                number: "number",
                expirationMonth: 1,
                expirationYear: 1,
                cvc: "cvc",
            },
            card: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            networkToken: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            tokenId: "token_id",
            tokenIntentId: "token_intent_id",
            extras: {
                deduplicated: true,
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/network-tokens/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkTokens.get("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/network-tokens/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkTokens.get("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-tokens/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkTokens.get("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/network-tokens/id").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkTokens.get("id");
        }).rejects.toThrow(BasisTheory.InternalServerError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/network-tokens/id").respondWith().statusCode(200).build();

        const response = await client.networkTokens.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/network-tokens/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.delete("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/network-tokens/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.delete("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/network-tokens/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.delete("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/network-tokens/id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.delete("id");
        }).rejects.toThrow(BasisTheory.InternalServerError);
    });

    test("suspend (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            data: { number: "number", expiration_month: 1, expiration_year: 1, cvc: "cvc" },
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            token_id: "token_id",
            token_intent_id: "token_intent_id",
            _extras: { deduplicated: true },
        };
        server
            .mockEndpoint()
            .put("/network-tokens/id/suspend")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkTokens.suspend("id");
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            data: {
                number: "number",
                expirationMonth: 1,
                expirationYear: 1,
                cvc: "cvc",
            },
            card: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            networkToken: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            tokenId: "token_id",
            tokenIntentId: "token_intent_id",
            extras: {
                deduplicated: true,
            },
        });
    });

    test("suspend (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/suspend")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.suspend("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("suspend (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/suspend")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.suspend("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("suspend (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/network-tokens/id/suspend")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.suspend("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("suspend (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/suspend")
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.suspend("id");
        }).rejects.toThrow(BasisTheory.ConflictError);
    });

    test("suspend (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/suspend")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.suspend("id");
        }).rejects.toThrow(BasisTheory.ServiceUnavailableError);
    });

    test("resume (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            data: { number: "number", expiration_month: 1, expiration_year: 1, cvc: "cvc" },
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            token_id: "token_id",
            token_intent_id: "token_intent_id",
            _extras: { deduplicated: true },
        };
        server
            .mockEndpoint()
            .put("/network-tokens/id/resume")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkTokens.resume("id");
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            data: {
                number: "number",
                expirationMonth: 1,
                expirationYear: 1,
                cvc: "cvc",
            },
            card: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            networkToken: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            par: "par",
            status: "status",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            tokenId: "token_id",
            tokenIntentId: "token_intent_id",
            extras: {
                deduplicated: true,
            },
        });
    });

    test("resume (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/resume")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.resume("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("resume (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/resume")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.resume("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("resume (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/network-tokens/id/resume")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.resume("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("resume (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/resume")
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.resume("id");
        }).rejects.toThrow(BasisTheory.ConflictError);
    });

    test("resume (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/network-tokens/id/resume")
            .respondWith()
            .statusCode(503)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkTokens.resume("id");
        }).rejects.toThrow(BasisTheory.ServiceUnavailableError);
    });
});
