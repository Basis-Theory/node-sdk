/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../../src/Client";

describe("Events", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            "3ds.session.authenticated",
            "3ds.session.challenge-result-retrieved",
            "3ds.session.created",
            "3ds.session.decoupled-challenge-notification",
            "account-updater.job.completed",
            "account-updater.job.created",
            "account-updater.job.failed",
            "application.created",
            "application.updated",
            "application.deleted",
            "application.key.created",
            "application.key.deleted",
            "http.request",
            "proxy.created",
            "proxy.deleted",
            "proxy.invoked",
            "proxy.updated",
            "reactor.completed",
            "reactor.created",
            "reactor.deleted",
            "reactor.failed",
            "reactor.invoked",
            "reactor.updated",
            "session.authorized",
            "session.created",
            "tenant.updated",
            "tenant.invitation.accepted",
            "tenant.invitation.created",
            "tenant.invitation.deleted",
            "tenant.invitation.resent",
            "tenant.member.created",
            "tenant.member.deleted",
            "token.created",
            "token.deleted",
            "token.expired",
            "token.property.expired",
            "token.read",
            "token.updated",
            "token-intent.created",
            "token-intent.converted",
            "token-intent.deleted",
        ];
        server
            .mockEndpoint()
            .get("/webhooks/event-types")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.events.list();
        expect(response).toEqual([
            "3ds.session.authenticated",
            "3ds.session.challenge-result-retrieved",
            "3ds.session.created",
            "3ds.session.decoupled-challenge-notification",
            "account-updater.job.completed",
            "account-updater.job.created",
            "account-updater.job.failed",
            "application.created",
            "application.updated",
            "application.deleted",
            "application.key.created",
            "application.key.deleted",
            "http.request",
            "proxy.created",
            "proxy.deleted",
            "proxy.invoked",
            "proxy.updated",
            "reactor.completed",
            "reactor.created",
            "reactor.deleted",
            "reactor.failed",
            "reactor.invoked",
            "reactor.updated",
            "session.authorized",
            "session.created",
            "tenant.updated",
            "tenant.invitation.accepted",
            "tenant.invitation.created",
            "tenant.invitation.deleted",
            "tenant.invitation.resent",
            "tenant.member.created",
            "tenant.member.deleted",
            "token.created",
            "token.deleted",
            "token.expired",
            "token.property.expired",
            "token.read",
            "token.updated",
            "token-intent.created",
            "token-intent.converted",
            "token-intent.deleted",
        ]);
    });
});
