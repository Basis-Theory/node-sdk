/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("Tokens", () => {
    test("detokenize", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/detokenize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokens.detokenize({
            key: "value",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            type: "type",
            tenant_id: "tenant_id",
            data: { key: "value" },
            metadata: { key: "value" },
            enrichments: {
                bin_details: {
                    card_brand: "card_brand",
                    type: "type",
                    prepaid: true,
                    card_segment_type: "card_segment_type",
                    reloadable: true,
                    pan_or_token: "pan_or_token",
                    account_updater: true,
                    alm: true,
                    domestic_only: true,
                    gambling_blocked: true,
                    level2: true,
                    level3: true,
                    issuer_currency: "issuer_currency",
                    combo_card: "combo_card",
                    bin_length: 1,
                    authentication: { key: "value" },
                    cost: { key: "value" },
                },
                card_details: { bin: "bin", last4: "last4" },
            },
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            bank: { routing_number: "routing_number", account_number_last4: "account_number_last4" },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            fingerprint: "fingerprint",
            fingerprint_expression: "fingerprint_expression",
            mask: { key: "value" },
            privacy: {
                classification: "classification",
                impact_level: "impact_level",
                restriction_policy: "restriction_policy",
            },
            search_indexes: ["search_indexes"],
            expires_at: "2024-01-15T09:30:00Z",
            containers: ["containers"],
            aliases: ["aliases"],
            authentication: { key: "value" },
            _extras: {
                deduplicated: true,
                tsp_details: {
                    tsp: "tsp",
                    auth_method: "auth_method",
                    message_id: "message_id",
                    eci_indicator: "eci_indicator",
                    transaction_id: "transaction_id",
                    currency_code: "currency_code",
                    transaction_amount: 1000000,
                    cardholder_name: "cardholder_name",
                    device_manufacturer_identifier: "device_manufacturer_identifier",
                    payment_data_type: "payment_data_type",
                    merchant_token_identifier: "merchant_token_identifier",
                    authentication_responses: [{}],
                    status: "status",
                },
                deduplication_behavior: "deduplication_behavior",
                network_token_ids: ["network_token_ids"],
                decrypted_payload: true,
            },
        };
        server.mockEndpoint().get("/tokens/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tokens.get("id");
        expect(response).toEqual({
            id: "id",
            type: "type",
            tenantId: "tenant_id",
            data: {
                key: "value",
            },
            metadata: {
                key: "value",
            },
            enrichments: {
                binDetails: {
                    cardBrand: "card_brand",
                    type: "type",
                    prepaid: true,
                    cardSegmentType: "card_segment_type",
                    reloadable: true,
                    panOrToken: "pan_or_token",
                    accountUpdater: true,
                    alm: true,
                    domesticOnly: true,
                    gamblingBlocked: true,
                    level2: true,
                    level3: true,
                    issuerCurrency: "issuer_currency",
                    comboCard: "combo_card",
                    binLength: 1,
                    authentication: {
                        key: "value",
                    },
                    cost: {
                        key: "value",
                    },
                },
                cardDetails: {
                    bin: "bin",
                    last4: "last4",
                },
            },
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            card: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            bank: {
                routingNumber: "routing_number",
                accountNumberLast4: "account_number_last4",
            },
            networkToken: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            fingerprint: "fingerprint",
            fingerprintExpression: "fingerprint_expression",
            mask: {
                key: "value",
            },
            privacy: {
                classification: "classification",
                impactLevel: "impact_level",
                restrictionPolicy: "restriction_policy",
            },
            searchIndexes: ["search_indexes"],
            expiresAt: new Date("2024-01-15T09:30:00.000Z"),
            containers: ["containers"],
            aliases: ["aliases"],
            authentication: {
                key: "value",
            },
            extras: {
                deduplicated: true,
                tspDetails: {
                    tsp: "tsp",
                    authMethod: "auth_method",
                    messageId: "message_id",
                    eciIndicator: "eci_indicator",
                    transactionId: "transaction_id",
                    currencyCode: "currency_code",
                    transactionAmount: 1000000,
                    cardholderName: "cardholder_name",
                    deviceManufacturerIdentifier: "device_manufacturer_identifier",
                    paymentDataType: "payment_data_type",
                    merchantTokenIdentifier: "merchant_token_identifier",
                    authenticationResponses: [{}],
                    status: "status",
                },
                deduplicationBehavior: "deduplication_behavior",
                networkTokenIds: ["network_token_ids"],
                decryptedPayload: true,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/tokens/id").respondWith().statusCode(200).build();

        const response = await client.tokens.delete("id");
        expect(response).toEqual(undefined);
    });
});
