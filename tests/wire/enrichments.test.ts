/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("Enrichments", () => {
    test("bankAccountVerify", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { token_id: "token_id" };
        const rawResponseBody = { status: "status" };
        server
            .mockEndpoint()
            .post("/enrichments/bank-account-verify")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.enrichments.bankAccountVerify({
            tokenId: "token_id",
        });
        expect(response).toEqual({
            status: "status",
        });
    });

    test("getcarddetails", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            brand: "brand",
            funding: "funding",
            segment: "segment",
            issuer: { country: "country", name: "name" },
            additional: [{ brand: "brand", funding: "funding", segment: "segment" }],
        };
        server
            .mockEndpoint()
            .get("/enrichments/card-details")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.enrichments.getcarddetails({
            bin: "bin",
        });
        expect(response).toEqual({
            brand: "brand",
            funding: "funding",
            segment: "segment",
            issuer: {
                country: "country",
                name: "name",
            },
            additional: [
                {
                    brand: "brand",
                    funding: "funding",
                    segment: "segment",
                },
            ],
        });
    });
});
