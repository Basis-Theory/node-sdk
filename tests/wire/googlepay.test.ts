/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("Googlepay", () => {
    test("tokenize", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            token_intent: {
                id: "id",
                type: "type",
                tenant_id: "tenant_id",
                fingerprint: "fingerprint",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                card: {
                    bin: "bin",
                    last4: "last4",
                    expiration_month: 1,
                    expiration_year: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                bank: { routing_number: "routing_number", account_number_last4: "account_number_last4" },
                network_token: {
                    bin: "bin",
                    last4: "last4",
                    expiration_month: 1,
                    expiration_year: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                authentication: { key: "value" },
                _extras: { network_token_ids: ["network_token_ids"] },
            },
        };
        server
            .mockEndpoint()
            .post("/connections/google-pay/tokenize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.googlepay.tokenize();
        expect(response).toEqual({
            tokenIntent: {
                id: "id",
                type: "type",
                tenantId: "tenant_id",
                fingerprint: "fingerprint",
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                expiresAt: new Date("2024-01-15T09:30:00.000Z"),
                card: {
                    bin: "bin",
                    last4: "last4",
                    expirationMonth: 1,
                    expirationYear: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                bank: {
                    routingNumber: "routing_number",
                    accountNumberLast4: "account_number_last4",
                },
                networkToken: {
                    bin: "bin",
                    last4: "last4",
                    expirationMonth: 1,
                    expirationYear: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                authentication: {
                    key: "value",
                },
                extras: {
                    networkTokenIds: ["network_token_ids"],
                },
            },
        });
    });
});
