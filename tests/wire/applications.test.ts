/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("Applications", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
            type: "type",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        };
        server.mockEndpoint().get("/applications/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.applications.get("id");
        expect(response).toEqual({
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
            type: "type",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/applications/id").respondWith().statusCode(200).build();

        const response = await client.applications.delete("id");
        expect(response).toEqual(undefined);
    });

    test("get_by_key", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
            type: "type",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        };
        server.mockEndpoint().get("/applications/key").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.applications.getByKey();
        expect(response).toEqual({
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
            type: "type",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        });
    });
});
