// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../src/api/index";
import { BasisTheoryClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Applications", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            pagination: { total_items: 1, page_number: 1, page_size: 1, total_pages: 1, next: "next" },
            data: [
                {
                    id: "id",
                    tenant_id: "tenant_id",
                    name: "name",
                    keys: [{}],
                    type: "type",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                    modified_by: "modified_by",
                    modified_at: "2024-01-15T09:30:00Z",
                    permissions: ["permissions"],
                    rules: [{}],
                },
            ],
        };
        server.mockEndpoint().get("/applications").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            pagination: {
                totalItems: 1,
                pageNumber: 1,
                pageSize: 1,
                totalPages: 1,
                next: "next",
            },
            data: [
                {
                    id: "id",
                    tenantId: "tenant_id",
                    name: "name",
                    keys: [{}],
                    type: "type",
                    createdBy: "created_by",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                    modifiedBy: "modified_by",
                    modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                    permissions: ["permissions"],
                    rules: [{}],
                },
            ],
        };
        const page = await client.applications.list();

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/applications").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.list();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/applications").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.list();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/applications").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.list();
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
            type: "type",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        };
        server.mockEndpoint().get("/applications/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.applications.get("id");
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    createdBy: "created_by",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
            type: "type",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/applications/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.get("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/applications/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.get("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/applications/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.get("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/applications/id").respondWith().statusCode(200).build();

        const response = await client.applications.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/applications/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applications.delete("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/applications/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applications.delete("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/applications/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applications.delete("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("get_by_key (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
            type: "type",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        };
        server.mockEndpoint().get("/applications/key").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.applications.getByKey();
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            name: "name",
            keys: [
                {
                    id: "id",
                    key: "key",
                    version: "version",
                    createdBy: "created_by",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
            type: "type",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            permissions: ["permissions"],
            rules: [
                {
                    description: "description",
                    priority: 1,
                    container: "container",
                    transform: "transform",
                    conditions: [{}],
                    permissions: ["permissions"],
                },
            ],
        });
    });

    test("get_by_key (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/applications/key").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.getByKey();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get_by_key (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/applications/key").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applications.getByKey();
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });
});
