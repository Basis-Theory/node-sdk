// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../../src/api/index";
import { BasisTheoryClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("RealTime", () => {
    test("invoke (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { token_id: "9a420b15-ddfe-4793-9466-48f53520e47c" };
        const rawResponseBody = { result_code: "UPD_PAN" };
        server
            .mockEndpoint()
            .post("/account-updater/real-time")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accountUpdater.realTime.invoke({
            tokenId: "9a420b15-ddfe-4793-9466-48f53520e47c",
        });
        expect(response).toEqual({
            resultCode: "UPD_PAN",
        });
    });

    test("invoke (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { token_id: "token_id" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/account-updater/real-time")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.realTime.invoke({
                tokenId: "token_id",
            });
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("invoke (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { token_id: "token_id" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/account-updater/real-time")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.realTime.invoke({
                tokenId: "token_id",
            });
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("invoke (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { token_id: "token_id" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/account-updater/real-time")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.realTime.invoke({
                tokenId: "token_id",
            });
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("invoke (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { token_id: "token_id" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/account-updater/real-time")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.realTime.invoke({
                tokenId: "token_id",
            });
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });
});
