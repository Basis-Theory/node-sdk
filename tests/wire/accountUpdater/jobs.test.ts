/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../../src/Client";

describe("Jobs", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: "2024-07-18T20:20:18Z",
            expiresAt: "2024-07-25T20:20:18Z",
            errors: ["File cannot be empty"],
        };
        server
            .mockEndpoint()
            .get("/account-updater/jobs/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accountUpdater.jobs.get("id");
        expect(response).toEqual({
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: "2024-07-18T20:20:18Z",
            expiresAt: "2024-07-25T20:20:18Z",
            errors: ["File cannot be empty"],
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            pagination: { page_size: 1, next: "AgAAAA==" },
            data: [
                {
                    id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
                    tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
                    status: "pending",
                    uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
                    createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
                    createdAt: "2024-07-18T20:20:18Z",
                    expiresAt: "2024-07-25T20:20:18Z",
                    errors: ["File cannot be empty"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/account-updater/jobs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accountUpdater.jobs.list();
        expect(response).toEqual({
            pagination: {
                page_size: 1,
                next: "AgAAAA==",
            },
            data: [
                {
                    id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
                    tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
                    status: "pending",
                    uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
                    createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
                    createdAt: "2024-07-18T20:20:18Z",
                    expiresAt: "2024-07-25T20:20:18Z",
                    errors: ["File cannot be empty"],
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: "2024-07-18T20:20:18Z",
            expiresAt: "2024-07-25T20:20:18Z",
            errors: ["File cannot be empty"],
        };
        server
            .mockEndpoint()
            .post("/account-updater/jobs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accountUpdater.jobs.create();
        expect(response).toEqual({
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: "2024-07-18T20:20:18Z",
            expiresAt: "2024-07-25T20:20:18Z",
            errors: ["File cannot be empty"],
        });
    });
});
