// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../../src/api/index";
import { BasisTheoryClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Jobs", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: "2024-07-18T20:20:18Z",
            expiresAt: "2024-07-25T20:20:18Z",
            errors: ["File cannot be empty"],
            requests: 1000,
            results: { UPD_PAN: 45, NO_UPDATE: 856, WRN_CLOSED_ACCOUNT: 8 },
        };
        server
            .mockEndpoint()
            .get("/account-updater/jobs/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accountUpdater.jobs.get("id");
        expect(response).toEqual({
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: new Date("2024-07-18T20:20:18.000Z"),
            expiresAt: new Date("2024-07-25T20:20:18.000Z"),
            errors: ["File cannot be empty"],
            requests: 1000,
            results: {
                UPD_PAN: 45,
                NO_UPDATE: 856,
                WRN_CLOSED_ACCOUNT: 8,
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .get("/account-updater/jobs/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.get("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .get("/account-updater/jobs/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.get("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/account-updater/jobs/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.get("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            pagination: { page_size: 1, next: "AgAAAA==" },
            data: [
                {
                    id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
                    tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
                    status: "pending",
                    uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
                    createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
                    createdAt: "2024-07-18T20:20:18Z",
                    expiresAt: "2024-07-25T20:20:18Z",
                    errors: ["File cannot be empty"],
                    requests: 1000,
                    results: { UPD_PAN: 45, NO_UPDATE: 856, WRN_CLOSED_ACCOUNT: 8 },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/account-updater/jobs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accountUpdater.jobs.list();
        expect(response).toEqual({
            pagination: {
                pageSize: 1,
                next: "AgAAAA==",
            },
            data: [
                {
                    id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
                    tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
                    status: "pending",
                    uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
                    createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
                    createdAt: new Date("2024-07-18T20:20:18.000Z"),
                    expiresAt: new Date("2024-07-25T20:20:18.000Z"),
                    errors: ["File cannot be empty"],
                    requests: 1000,
                    results: {
                        UPD_PAN: 45,
                        NO_UPDATE: 856,
                        WRN_CLOSED_ACCOUNT: 8,
                    },
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .get("/account-updater/jobs")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.list();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .get("/account-updater/jobs")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.list();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: "2024-07-18T20:20:18Z",
            expiresAt: "2024-07-25T20:20:18Z",
            errors: ["File cannot be empty"],
            requests: 1000,
            results: { UPD_PAN: 45, NO_UPDATE: 856, WRN_CLOSED_ACCOUNT: 8 },
        };
        server
            .mockEndpoint()
            .post("/account-updater/jobs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accountUpdater.jobs.create();
        expect(response).toEqual({
            id: "7a70e388-9c78-4c1b-85dd-f2b4e7a823f6",
            tenantId: "064bbc70-204b-4ef1-a757-ec0878be5945",
            status: "pending",
            uploadUrl: "https://example.s3.amazonaws.com/pre-signed-upload-url",
            createdBy: "b6b44a65-c13a-4df2-bd7f-894f4fbe6b02",
            createdAt: new Date("2024-07-18T20:20:18.000Z"),
            expiresAt: new Date("2024-07-25T20:20:18.000Z"),
            errors: ["File cannot be empty"],
            requests: 1000,
            results: {
                UPD_PAN: 45,
                NO_UPDATE: 856,
                WRN_CLOSED_ACCOUNT: 8,
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/account-updater/jobs")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.create();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/account-updater/jobs")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.create();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/account-updater/jobs")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accountUpdater.jobs.create();
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });
});
