/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("TokenIntents", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            type: "type",
            tenant_id: "tenant_id",
            fingerprint: "fingerprint",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            bank: { routing_number: "routing_number", account_number_last4: "account_number_last4" },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            authentication: { key: "value" },
            _extras: {
                tsp_details: {
                    tsp: "tsp",
                    auth_method: "auth_method",
                    message_id: "message_id",
                    eci_indicator: "eci_indicator",
                    transaction_id: "transaction_id",
                    currency_code: "currency_code",
                    transaction_amount: 1000000,
                    cardholder_name: "cardholder_name",
                    device_manufacturer_identifier: "device_manufacturer_identifier",
                    payment_data_type: "payment_data_type",
                    merchant_token_identifier: "merchant_token_identifier",
                    authentication_responses: [{}],
                    status: "status",
                },
                network_token_ids: ["network_token_ids"],
            },
        };
        server.mockEndpoint().get("/token-intents/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tokenIntents.get("id");
        expect(response).toEqual({
            id: "id",
            type: "type",
            tenant_id: "tenant_id",
            fingerprint: "fingerprint",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuer_country: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            bank: {
                routing_number: "routing_number",
                account_number_last4: "account_number_last4",
            },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuer_country: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            authentication: {
                key: "value",
            },
            _extras: {
                tsp_details: {
                    tsp: "tsp",
                    auth_method: "auth_method",
                    message_id: "message_id",
                    eci_indicator: "eci_indicator",
                    transaction_id: "transaction_id",
                    currency_code: "currency_code",
                    transaction_amount: 1000000,
                    cardholder_name: "cardholder_name",
                    device_manufacturer_identifier: "device_manufacturer_identifier",
                    payment_data_type: "payment_data_type",
                    merchant_token_identifier: "merchant_token_identifier",
                    authentication_responses: [{}],
                    status: "status",
                },
                network_token_ids: ["network_token_ids"],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/token-intents/id").respondWith().statusCode(200).build();

        const response = await client.tokenIntents.delete("id");
        expect(response).toEqual(undefined);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "x", data: { key: "value" } };
        const rawResponseBody = {
            id: "id",
            type: "type",
            tenant_id: "blackcurrant........................",
            fingerprint: "fingerprint",
            created_by: "blackcurrant........................",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: { country: "country", name: "name" },
                    },
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: { country: "country", name: "name" },
                    },
                ],
            },
            bank: { routing_number: "routing_number", account_number_last4: "account_number_last4" },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: { country: "country", name: "name" },
                    },
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: { country: "country", name: "name" },
                    },
                ],
            },
            authentication: { key: "value" },
            _extras: {
                tsp_details: {
                    tsp: "tsp",
                    auth_method: "auth_method",
                    message_id: "message_id",
                    eci_indicator: "eci_indicator",
                    assurance_details: { account_verified: true, card_holder_authenticated: true },
                    transaction_id: "transaction_id",
                    currency_code: "currency_code",
                    transaction_amount: 1000000,
                    cardholder_name: "cardholder_name",
                    device_manufacturer_identifier: "device_manufacturer_identifier",
                    payment_data_type: "payment_data_type",
                    merchant_token_identifier: "merchant_token_identifier",
                    authentication_responses: [
                        {
                            merchant_identifier: "merchant_identifier",
                            authentication_data: "authentication_data",
                            transaction_amount: "transaction_amount",
                        },
                        {
                            merchant_identifier: "merchant_identifier",
                            authentication_data: "authentication_data",
                            transaction_amount: "transaction_amount",
                        },
                    ],
                    status: "status",
                },
                network_token_ids: ["network_token_ids", "network_token_ids"],
            },
        };
        server
            .mockEndpoint()
            .post("/token-intents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenIntents.create({
            type: "x",
            data: {
                key: "value",
            },
        });
        expect(response).toEqual({
            id: "id",
            type: "type",
            tenant_id: "blackcurrant........................",
            fingerprint: "fingerprint",
            created_by: "blackcurrant........................",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuer_country: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: {
                            country: "country",
                            name: "name",
                        },
                    },
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: {
                            country: "country",
                            name: "name",
                        },
                    },
                ],
            },
            bank: {
                routing_number: "routing_number",
                account_number_last4: "account_number_last4",
            },
            network_token: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuer_country: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: {
                            country: "country",
                            name: "name",
                        },
                    },
                    {
                        brand: "brand",
                        funding: "funding",
                        authentication: "authentication",
                        issuer: {
                            country: "country",
                            name: "name",
                        },
                    },
                ],
            },
            authentication: {
                key: "value",
            },
            _extras: {
                tsp_details: {
                    tsp: "tsp",
                    auth_method: "auth_method",
                    message_id: "message_id",
                    eci_indicator: "eci_indicator",
                    assurance_details: {
                        account_verified: true,
                        card_holder_authenticated: true,
                    },
                    transaction_id: "transaction_id",
                    currency_code: "currency_code",
                    transaction_amount: 1000000,
                    cardholder_name: "cardholder_name",
                    device_manufacturer_identifier: "device_manufacturer_identifier",
                    payment_data_type: "payment_data_type",
                    merchant_token_identifier: "merchant_token_identifier",
                    authentication_responses: [
                        {
                            merchant_identifier: "merchant_identifier",
                            authentication_data: "authentication_data",
                            transaction_amount: "transaction_amount",
                        },
                        {
                            merchant_identifier: "merchant_identifier",
                            authentication_data: "authentication_data",
                            transaction_amount: "transaction_amount",
                        },
                    ],
                    status: "status",
                },
                network_token_ids: ["network_token_ids", "network_token_ids"],
            },
        });
    });
});
