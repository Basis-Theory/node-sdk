/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../../src/Client";

describe("Members", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            pagination: { total_items: 1, page_number: 1, page_size: 1, total_pages: 1, next: "next" },
            data: [
                {
                    id: "id",
                    tenant_id: "tenant_id",
                    role: "role",
                    created_by: "created_by",
                    created_date: "2024-01-15T09:30:00Z",
                    modified_by: "modified_by",
                    modified_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/tenants/self/members")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tenants.members.list();
        expect(response).toEqual({
            pagination: {
                totalItems: 1,
                pageNumber: 1,
                pageSize: 1,
                totalPages: 1,
                next: "next",
            },
            data: [
                {
                    id: "id",
                    tenantId: "tenant_id",
                    role: "role",
                    createdBy: "created_by",
                    createdDate: new Date("2024-01-15T09:30:00.000Z"),
                    modifiedBy: "modified_by",
                    modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/tenants/self/members/memberId").respondWith().statusCode(200).build();

        const response = await client.tenants.members.delete("memberId");
        expect(response).toEqual(undefined);
    });
});
