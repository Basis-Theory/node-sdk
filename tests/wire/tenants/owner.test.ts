// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../../src/api/index";
import { BasisTheoryClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Owner", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            user: {
                id: "id",
                email: "email",
                provider: "provider",
                mfa_enrolled: true,
                first_name: "first_name",
                last_name: "last_name",
                picture: "picture",
            },
            role: "role",
            created_by: "created_by",
            created_date: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/tenants/self/owner")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tenants.owner.get();
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            user: {
                id: "id",
                email: "email",
                provider: "provider",
                mfaEnrolled: true,
                firstName: "first_name",
                lastName: "last_name",
                picture: "picture",
            },
            role: "role",
            createdBy: "created_by",
            createdDate: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .get("/tenants/self/owner")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.owner.get();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .get("/tenants/self/owner")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.owner.get();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/tenants/self/owner")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.owner.get();
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });
});
