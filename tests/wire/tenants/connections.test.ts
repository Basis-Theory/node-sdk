// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../../src/api/index";
import { BasisTheoryClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Connections", () => {
    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { connection_id: "connection_id" };
        server
            .mockEndpoint()
            .delete("/tenants/self/connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tenants.connections.delete();
        expect(response).toEqual({
            connectionId: "connection_id",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/tenants/self/connections")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.connections.delete();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/tenants/self/connections")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.connections.delete();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/tenants/self/connections")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tenants.connections.delete();
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });
});
