// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../src/api/index";
import { BasisTheoryClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("ApplePay", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            apple_pay: {
                id: "id",
                type: "type",
                tenant_id: "tenant_id",
                status: "status",
                expires_at: "2024-01-15T09:30:00Z",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                modified_by: "modified_by",
                modified_at: "2024-01-15T09:30:00Z",
                card: {
                    bin: "bin",
                    last4: "last4",
                    expiration_month: 1,
                    expiration_year: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                data: { key: "value" },
                authentication: {
                    threeds_cryptogram: "threeds_cryptogram",
                    eci_indicator: "eci_indicator",
                    authentication_responses: [{}],
                },
                fingerprint: "fingerprint",
            },
        };
        server
            .mockEndpoint()
            .post("/apple-pay")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applePay.create();
        expect(response).toEqual({
            applePay: {
                id: "id",
                type: "type",
                tenantId: "tenant_id",
                status: "status",
                expiresAt: new Date("2024-01-15T09:30:00.000Z"),
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                modifiedBy: "modified_by",
                modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                card: {
                    bin: "bin",
                    last4: "last4",
                    expirationMonth: 1,
                    expirationYear: 1,
                    brand: "brand",
                    funding: "funding",
                    authentication: "authentication",
                    segment: "segment",
                    additional: [{}],
                },
                data: {
                    key: "value",
                },
                authentication: {
                    threedsCryptogram: "threeds_cryptogram",
                    eciIndicator: "eci_indicator",
                    authenticationResponses: [{}],
                },
                fingerprint: "fingerprint",
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.create();
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.create();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.create();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/apple-pay")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.applePay.create();
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            type: "type",
            tenant_id: "tenant_id",
            status: "status",
            expires_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            card: {
                bin: "bin",
                last4: "last4",
                expiration_month: 1,
                expiration_year: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: { country: "country", name: "name" },
                issuer_country: { alpha2: "alpha2", name: "name", numeric: "numeric" },
                segment: "segment",
                additional: [{}],
            },
            data: { key: "value" },
            authentication: {
                threeds_cryptogram: "threeds_cryptogram",
                eci_indicator: "eci_indicator",
                authentication_responses: [{}],
            },
            fingerprint: "fingerprint",
        };
        server.mockEndpoint().get("/apple-pay/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.applePay.get("id");
        expect(response).toEqual({
            id: "id",
            type: "type",
            tenantId: "tenant_id",
            status: "status",
            expiresAt: new Date("2024-01-15T09:30:00.000Z"),
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            card: {
                bin: "bin",
                last4: "last4",
                expirationMonth: 1,
                expirationYear: 1,
                brand: "brand",
                funding: "funding",
                authentication: "authentication",
                issuer: {
                    country: "country",
                    name: "name",
                },
                issuerCountry: {
                    alpha2: "alpha2",
                    name: "name",
                    numeric: "numeric",
                },
                segment: "segment",
                additional: [{}],
            },
            data: {
                key: "value",
            },
            authentication: {
                threedsCryptogram: "threeds_cryptogram",
                eciIndicator: "eci_indicator",
                authenticationResponses: [{}],
            },
            fingerprint: "fingerprint",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/apple-pay/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applePay.get("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/apple-pay/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applePay.get("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/apple-pay/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applePay.get("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = "string";
        server.mockEndpoint().delete("/apple-pay/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.applePay.delete("id");
        expect(response).toEqual("string");
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().delete("/apple-pay/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applePay.delete("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().delete("/apple-pay/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applePay.delete("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/apple-pay/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.applePay.delete("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });
});
