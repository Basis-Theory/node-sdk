// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../src/api/index";
import { BasisTheoryClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Logs", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            pagination: { total_items: 1, page_number: 1, page_size: 1, total_pages: 1, next: "next" },
            data: [
                {
                    id: "id",
                    tenant_id: "tenant_id",
                    actor_id: "actor_id",
                    actor_type: "actor_type",
                    entity_type: "entity_type",
                    entity_id: "entity_id",
                    operation: "operation",
                    message: "message",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server.mockEndpoint().get("/logs").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            pagination: {
                totalItems: 1,
                pageNumber: 1,
                pageSize: 1,
                totalPages: 1,
                next: "next",
            },
            data: [
                {
                    id: "id",
                    tenantId: "tenant_id",
                    actorId: "actor_id",
                    actorType: "actor_type",
                    entityType: "entity_type",
                    entityId: "entity_id",
                    operation: "operation",
                    message: "message",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
        };
        const page = await client.logs.list();

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/logs").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.logs.list();
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/logs").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.logs.list();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/logs").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.logs.list();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get_entity_types (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = [{ display_name: "display_name", value: "value" }];
        server.mockEndpoint().get("/logs/entity-types").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.logs.getEntityTypes();
        expect(response).toEqual([
            {
                displayName: "display_name",
                value: "value",
            },
        ]);
    });

    test("get_entity_types (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/logs/entity-types").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.logs.getEntityTypes();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get_entity_types (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/logs/entity-types").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.logs.getEntityTypes();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });
});
