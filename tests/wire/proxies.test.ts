// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../src/api/index";
import { BasisTheoryClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Proxies", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            pagination: { total_items: 1, page_number: 1, page_size: 1, total_pages: 1, next: "next" },
            data: [
                {
                    id: "id",
                    key: "key",
                    tenant_id: "tenant_id",
                    name: "name",
                    destination_url: "destination_url",
                    request_reactor_id: "request_reactor_id",
                    response_reactor_id: "response_reactor_id",
                    require_auth: true,
                    request_transforms: [{}],
                    response_transforms: [{}],
                    application_id: "application_id",
                    proxy_host: "proxy_host",
                    timeout: 1,
                    client_certificate: "client_certificate",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                    modified_by: "modified_by",
                    modified_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server.mockEndpoint().get("/proxies").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            pagination: {
                totalItems: 1,
                pageNumber: 1,
                pageSize: 1,
                totalPages: 1,
                next: "next",
            },
            data: [
                {
                    id: "id",
                    key: "key",
                    tenantId: "tenant_id",
                    name: "name",
                    destinationUrl: "destination_url",
                    requestReactorId: "request_reactor_id",
                    responseReactorId: "response_reactor_id",
                    requireAuth: true,
                    requestTransforms: [{}],
                    responseTransforms: [{}],
                    applicationId: "application_id",
                    proxyHost: "proxy_host",
                    timeout: 1,
                    clientCertificate: "client_certificate",
                    createdBy: "created_by",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                    modifiedBy: "modified_by",
                    modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
        };
        const page = await client.proxies.list();

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/proxies").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.list();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/proxies").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.list();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/proxies").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.list();
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            key: "key",
            tenant_id: "tenant_id",
            name: "name",
            destination_url: "destination_url",
            request_reactor_id: "request_reactor_id",
            response_reactor_id: "response_reactor_id",
            require_auth: true,
            request_transform: {
                type: "type",
                code: "code",
                matcher: "matcher",
                expression: "expression",
                replacement: "replacement",
                options: { identifier: "identifier", value: "value", location: "location" },
            },
            response_transform: {
                type: "type",
                code: "code",
                matcher: "matcher",
                expression: "expression",
                replacement: "replacement",
                options: { identifier: "identifier", value: "value", location: "location" },
            },
            request_transforms: [
                {
                    type: "type",
                    code: "code",
                    matcher: "matcher",
                    expression: "expression",
                    replacement: "replacement",
                },
            ],
            response_transforms: [
                {
                    type: "type",
                    code: "code",
                    matcher: "matcher",
                    expression: "expression",
                    replacement: "replacement",
                },
            ],
            application_id: "application_id",
            configuration: { key: "value" },
            proxy_host: "proxy_host",
            timeout: 1,
            client_certificate: "client_certificate",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
        };
        server.mockEndpoint().get("/proxies/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.proxies.get("id");
        expect(response).toEqual({
            id: "id",
            key: "key",
            tenantId: "tenant_id",
            name: "name",
            destinationUrl: "destination_url",
            requestReactorId: "request_reactor_id",
            responseReactorId: "response_reactor_id",
            requireAuth: true,
            requestTransform: {
                type: "type",
                code: "code",
                matcher: "matcher",
                expression: "expression",
                replacement: "replacement",
                options: {
                    identifier: "identifier",
                    value: "value",
                    location: "location",
                },
            },
            responseTransform: {
                type: "type",
                code: "code",
                matcher: "matcher",
                expression: "expression",
                replacement: "replacement",
                options: {
                    identifier: "identifier",
                    value: "value",
                    location: "location",
                },
            },
            requestTransforms: [
                {
                    type: "type",
                    code: "code",
                    matcher: "matcher",
                    expression: "expression",
                    replacement: "replacement",
                },
            ],
            responseTransforms: [
                {
                    type: "type",
                    code: "code",
                    matcher: "matcher",
                    expression: "expression",
                    replacement: "replacement",
                },
            ],
            applicationId: "application_id",
            configuration: {
                key: "value",
            },
            proxyHost: "proxy_host",
            timeout: 1,
            clientCertificate: "client_certificate",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/proxies/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.get("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/proxies/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.get("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/proxies/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.get("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/proxies/id").respondWith().statusCode(200).build();

        const response = await client.proxies.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().delete("/proxies/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.delete("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().delete("/proxies/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.delete("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/proxies/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.proxies.delete("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });
});
