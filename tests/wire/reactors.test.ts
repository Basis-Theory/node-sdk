// This file was auto-generated by Fern from our API Definition.

import * as BasisTheory from "../../src/api/index";
import { BasisTheoryClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Reactors", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            pagination: { total_items: 1, page_number: 1, page_size: 1, total_pages: 1, next: "next" },
            data: [
                {
                    id: "id",
                    tenant_id: "tenant_id",
                    name: "name",
                    state: "state",
                    code: "code",
                    created_by: "created_by",
                    created_at: "2024-01-15T09:30:00Z",
                    modified_by: "modified_by",
                    modified_at: "2024-01-15T09:30:00Z",
                    runtime: "runtime",
                },
            ],
        };
        server.mockEndpoint().get("/reactors").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            pagination: {
                totalItems: 1,
                pageNumber: 1,
                pageSize: 1,
                totalPages: 1,
                next: "next",
            },
            data: [
                {
                    id: "id",
                    tenantId: "tenant_id",
                    name: "name",
                    state: "state",
                    code: "code",
                    createdBy: "created_by",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                    modifiedBy: "modified_by",
                    modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                    runtime: "runtime",
                },
            ],
        };
        const page = await client.reactors.list();

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/reactors").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.list();
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/reactors").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.list();
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/reactors").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.list();
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            formula: {
                id: "id",
                type: "type",
                status: "status",
                name: "name",
                description: "description",
                icon: "icon",
                code: "code",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                modified_by: "modified_by",
                modified_at: "2024-01-15T09:30:00Z",
                configuration: [{ name: "name", type: "type" }],
                request_parameters: [{ name: "name", type: "type" }],
            },
            state: "state",
            code: "code",
            application: {
                id: "id",
                tenant_id: "tenant_id",
                name: "name",
                keys: [{}],
                type: "type",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                modified_by: "modified_by",
                modified_at: "2024-01-15T09:30:00Z",
                permissions: ["permissions"],
                rules: [{}],
            },
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            configuration: { key: "value" },
            runtime: "runtime",
            options: { dependencies: { key: "value" } },
        };
        server.mockEndpoint().get("/reactors/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.reactors.get("id");
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            name: "name",
            formula: {
                id: "id",
                type: "type",
                status: "status",
                name: "name",
                description: "description",
                icon: "icon",
                code: "code",
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                modifiedBy: "modified_by",
                modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                configuration: [
                    {
                        name: "name",
                        type: "type",
                    },
                ],
                requestParameters: [
                    {
                        name: "name",
                        type: "type",
                    },
                ],
            },
            state: "state",
            code: "code",
            application: {
                id: "id",
                tenantId: "tenant_id",
                name: "name",
                keys: [{}],
                type: "type",
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                modifiedBy: "modified_by",
                modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                permissions: ["permissions"],
                rules: [{}],
            },
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            configuration: {
                key: "value",
            },
            runtime: "runtime",
            options: {
                dependencies: {
                    key: "value",
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/reactors/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.get("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().get("/reactors/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.get("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/reactors/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.get("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/reactors/id").respondWith().statusCode(200).build();

        const response = await client.reactors.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().delete("/reactors/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.delete("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server.mockEndpoint().delete("/reactors/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.delete("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/reactors/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.reactors.delete("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("react (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            tokens: { key: "value" },
            raw: { key: "value" },
            body: { key: "value" },
            headers: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/reactors/id/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.reactors.react("id");
        expect(response).toEqual({
            tokens: {
                key: "value",
            },
            raw: {
                key: "value",
            },
            body: {
                key: "value",
            },
            headers: {
                key: "value",
            },
        });
    });

    test("react (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.react("id");
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("react (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.react("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("react (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.react("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("react (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/reactors/id/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.react("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("react (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.react("id");
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });

    test("reactAsync (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { asyncReactorRequestId: "asyncReactorRequestId" };
        server
            .mockEndpoint()
            .post("/reactors/id/react-async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.reactors.reactAsync("id");
        expect(response).toEqual({
            asyncReactorRequestId: "asyncReactorRequestId",
        });
    });

    test("reactAsync (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react-async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.reactAsync("id");
        }).rejects.toThrow(BasisTheory.BadRequestError);
    });

    test("reactAsync (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react-async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.reactAsync("id");
        }).rejects.toThrow(BasisTheory.UnauthorizedError);
    });

    test("reactAsync (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react-async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.reactAsync("id");
        }).rejects.toThrow(BasisTheory.ForbiddenError);
    });

    test("reactAsync (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/reactors/id/react-async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.reactAsync("id");
        }).rejects.toThrow(BasisTheory.NotFoundError);
    });

    test("reactAsync (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/reactors/id/react-async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.reactors.reactAsync("id");
        }).rejects.toThrow(BasisTheory.UnprocessableEntityError);
    });
});
