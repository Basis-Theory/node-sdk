/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("Reactors", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tenant_id: "tenant_id",
            name: "name",
            formula: {
                id: "id",
                type: "type",
                status: "status",
                name: "name",
                description: "description",
                icon: "icon",
                code: "code",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                modified_by: "modified_by",
                modified_at: "2024-01-15T09:30:00Z",
                configuration: [{ name: "name", type: "type" }],
                request_parameters: [{ name: "name", type: "type" }],
            },
            code: "code",
            application: {
                id: "id",
                tenant_id: "tenant_id",
                name: "name",
                keys: [{}],
                type: "type",
                created_by: "created_by",
                created_at: "2024-01-15T09:30:00Z",
                modified_by: "modified_by",
                modified_at: "2024-01-15T09:30:00Z",
                permissions: ["permissions"],
                rules: [{}],
            },
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
            modified_by: "modified_by",
            modified_at: "2024-01-15T09:30:00Z",
            configuration: { key: "value" },
        };
        server.mockEndpoint().get("/reactors/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.reactors.get("id");
        expect(response).toEqual({
            id: "id",
            tenantId: "tenant_id",
            name: "name",
            formula: {
                id: "id",
                type: "type",
                status: "status",
                name: "name",
                description: "description",
                icon: "icon",
                code: "code",
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                modifiedBy: "modified_by",
                modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                configuration: [
                    {
                        name: "name",
                        type: "type",
                    },
                ],
                requestParameters: [
                    {
                        name: "name",
                        type: "type",
                    },
                ],
            },
            code: "code",
            application: {
                id: "id",
                tenantId: "tenant_id",
                name: "name",
                keys: [{}],
                type: "type",
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                modifiedBy: "modified_by",
                modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
                permissions: ["permissions"],
                rules: [{}],
            },
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            modifiedBy: "modified_by",
            modifiedAt: new Date("2024-01-15T09:30:00.000Z"),
            configuration: {
                key: "value",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/reactors/id").respondWith().statusCode(200).build();

        const response = await client.reactors.delete("id");
        expect(response).toEqual(undefined);
    });

    test("react", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            tokens: { key: "value" },
            raw: { key: "value" },
            body: { key: "value" },
            headers: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/reactors/id/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.reactors.react("id");
        expect(response).toEqual({
            tokens: {
                key: "value",
            },
            raw: {
                key: "value",
            },
            body: {
                key: "value",
            },
            headers: {
                key: "value",
            },
        });
    });

    test("reactAsync", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { asyncReactorRequestId: "asyncReactorRequestId" };
        server
            .mockEndpoint()
            .post("/reactors/id/react-async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.reactors.reactAsync("id");
        expect(response).toEqual({
            asyncReactorRequestId: "asyncReactorRequestId",
        });
    });
});
