/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BasisTheoryClient } from "../../src/Client";

describe("ApplicationKeys", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            { id: "id", key: "key", version: "version", created_by: "created_by", created_at: "2024-01-15T09:30:00Z" },
        ];
        server
            .mockEndpoint()
            .get("/applications/id/keys")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applicationKeys.list("id");
        expect(response).toEqual([
            {
                id: "id",
                key: "key",
                version: "version",
                createdBy: "created_by",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            key: "key",
            version: "version",
            created_by: "created_by",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/applications/id/keys/keyId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.applicationKeys.get("id", "keyId");
        expect(response).toEqual({
            id: "id",
            key: "key",
            version: "version",
            createdBy: "created_by",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new BasisTheoryClient({ apiKey: "test", correlationId: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/applications/id/keys/keyId").respondWith().statusCode(200).build();

        const response = await client.applicationKeys.delete("id", "keyId");
        expect(response).toEqual(undefined);
    });
});
